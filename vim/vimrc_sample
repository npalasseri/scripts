"This is the vimrc file that I use, this I've taken from multiple folks best practise
" colorscheme badwolf
syntax enable           " enable syntax processing
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
set number              " show line numbers
set showcmd             " show command in bottom bar
" set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level
" space open/closes folds
nnoremap <space> za
set guifont=Monaco:h14
filetype plugin indent on      " load filetype-specific indent files

" Status line customization  
set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%=                           " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
set statusline+=%b,0x%-8B\                   " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
set laststatus=2
set clipboard+=unnamed
set autowrite  " Writes on make/shell commands
set autoread  
set hidden "  The current buffer can be put to the background without writing to disk
set nowrap

" Pathogen https://github.com/tpope/vim-pathogen is a autoload utility for plugins
execute pathogen#infect()


let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
        " The default plugin directory will be as follows:
        "   - Vim (Linux/macOS): '~/.vim/plugged'
        "   - Vim (Windows): '~/vimfiles/plugged'
        "   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
        " You can specify a custom plugin directory by passing it as the argument
        "   - e.g. `call plug#begin('~/.vim/plugged')`
        "   - Avoid using standard Vim directory names like 'plugin'

        " Make sure you use single quotes

        " Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
        Plug 'junegunn/vim-easy-align'

        " Any valid git URL is allowed
        Plug 'https://github.com/junegunn/vim-github-dashboard.git'

        " Multiple Plug commands can be written in a single line using | separators
        Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

        " On-demand loading
        Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
        Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

        " Using a non-default branch
        Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

        " Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
        Plug 'fatih/vim-go', { 'tag': '*' }

        " Plugin options
        Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

        " Plugin outside ~/.vim/plugged with post-update hook
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'
        Plug 'altercation/vim-colors-solarized'

        " Unmanaged plugin (manually installed and updated)
        Plug '~/my-prototype-plugin'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()

" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting
" The solarized colorscheme 
if has('gui_running')
  set background=light
  colorscheme solarized
else
  set background=dark
endif
set nocp
" CDC = Change to Directory of Current file
command CDC cd %:p:h

" ####### Custom mapping ##########
" ---------------------------------
" Map Ctrl-h to the history command in normal mode
nmap <C-h> :History<CR>
